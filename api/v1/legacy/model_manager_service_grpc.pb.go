// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package legacy

import (
	context "context"
	v1 "github.com/llmariner/model-manager/api/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModelsWorkerServiceClient is the client API for ModelsWorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelsWorkerServiceClient interface {
	// CreateStorageConfig creates a new storage config. Used by model-manager-loader.
	CreateStorageConfig(ctx context.Context, in *v1.CreateStorageConfigRequest, opts ...grpc.CallOption) (*v1.StorageConfig, error)
	// GetStorageConfig gets a storage config. Used by model-manager-loader.
	GetStorageConfig(ctx context.Context, in *v1.GetStorageConfigRequest, opts ...grpc.CallOption) (*v1.StorageConfig, error)
	// GetModel gets a model. Used by inference-manager-engine.
	GetModel(ctx context.Context, in *v1.GetModelRequest, opts ...grpc.CallOption) (*v1.Model, error)
	// RegisterModel registers a new fine-tuned model. Used by job-manager-dispatcher.
	// The model is not published until PublishModel is called.
	RegisterModel(ctx context.Context, in *v1.RegisterModelRequest, opts ...grpc.CallOption) (*v1.RegisterModelResponse, error)
	// PublishModel publishes the fine-tuned model. Used by job-manager-dispatcher.
	PublishModel(ctx context.Context, in *v1.PublishModelRequest, opts ...grpc.CallOption) (*v1.PublishModelResponse, error)
	// GetModelPath returns the path of the model. Used by inference-manager-engine.
	GetModelPath(ctx context.Context, in *v1.GetModelPathRequest, opts ...grpc.CallOption) (*v1.GetModelPathResponse, error)
	// GetModelAttributes returns the attributes of the model. Used by inference-manager-engine.
	GetModelAttributes(ctx context.Context, in *v1.GetModelAttributesRequest, opts ...grpc.CallOption) (*v1.ModelAttributes, error)
	// CreateBaseModel creates a new base model. Used by model-manager-loader.
	CreateBaseModel(ctx context.Context, in *v1.CreateBaseModelRequest, opts ...grpc.CallOption) (*v1.BaseModel, error)
	// GetBaseModelPath returns the path of the base model. Used by job-manager-dispatcher,
	// inference-manager-engine, and model-manager-loader.
	GetBaseModelPath(ctx context.Context, in *v1.GetBaseModelPathRequest, opts ...grpc.CallOption) (*v1.GetBaseModelPathResponse, error)
}

type modelsWorkerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelsWorkerServiceClient(cc grpc.ClientConnInterface) ModelsWorkerServiceClient {
	return &modelsWorkerServiceClient{cc}
}

func (c *modelsWorkerServiceClient) CreateStorageConfig(ctx context.Context, in *v1.CreateStorageConfigRequest, opts ...grpc.CallOption) (*v1.StorageConfig, error) {
	out := new(v1.StorageConfig)
	err := c.cc.Invoke(ctx, "/llmoperator.models.server.v1.ModelsWorkerService/CreateStorageConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsWorkerServiceClient) GetStorageConfig(ctx context.Context, in *v1.GetStorageConfigRequest, opts ...grpc.CallOption) (*v1.StorageConfig, error) {
	out := new(v1.StorageConfig)
	err := c.cc.Invoke(ctx, "/llmoperator.models.server.v1.ModelsWorkerService/GetStorageConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsWorkerServiceClient) GetModel(ctx context.Context, in *v1.GetModelRequest, opts ...grpc.CallOption) (*v1.Model, error) {
	out := new(v1.Model)
	err := c.cc.Invoke(ctx, "/llmoperator.models.server.v1.ModelsWorkerService/GetModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsWorkerServiceClient) RegisterModel(ctx context.Context, in *v1.RegisterModelRequest, opts ...grpc.CallOption) (*v1.RegisterModelResponse, error) {
	out := new(v1.RegisterModelResponse)
	err := c.cc.Invoke(ctx, "/llmoperator.models.server.v1.ModelsWorkerService/RegisterModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsWorkerServiceClient) PublishModel(ctx context.Context, in *v1.PublishModelRequest, opts ...grpc.CallOption) (*v1.PublishModelResponse, error) {
	out := new(v1.PublishModelResponse)
	err := c.cc.Invoke(ctx, "/llmoperator.models.server.v1.ModelsWorkerService/PublishModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsWorkerServiceClient) GetModelPath(ctx context.Context, in *v1.GetModelPathRequest, opts ...grpc.CallOption) (*v1.GetModelPathResponse, error) {
	out := new(v1.GetModelPathResponse)
	err := c.cc.Invoke(ctx, "/llmoperator.models.server.v1.ModelsWorkerService/GetModelPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsWorkerServiceClient) GetModelAttributes(ctx context.Context, in *v1.GetModelAttributesRequest, opts ...grpc.CallOption) (*v1.ModelAttributes, error) {
	out := new(v1.ModelAttributes)
	err := c.cc.Invoke(ctx, "/llmoperator.models.server.v1.ModelsWorkerService/GetModelAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsWorkerServiceClient) CreateBaseModel(ctx context.Context, in *v1.CreateBaseModelRequest, opts ...grpc.CallOption) (*v1.BaseModel, error) {
	out := new(v1.BaseModel)
	err := c.cc.Invoke(ctx, "/llmoperator.models.server.v1.ModelsWorkerService/CreateBaseModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsWorkerServiceClient) GetBaseModelPath(ctx context.Context, in *v1.GetBaseModelPathRequest, opts ...grpc.CallOption) (*v1.GetBaseModelPathResponse, error) {
	out := new(v1.GetBaseModelPathResponse)
	err := c.cc.Invoke(ctx, "/llmoperator.models.server.v1.ModelsWorkerService/GetBaseModelPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelsWorkerServiceServer is the server API for ModelsWorkerService service.
// All implementations must embed UnimplementedModelsWorkerServiceServer
// for forward compatibility
type ModelsWorkerServiceServer interface {
	// CreateStorageConfig creates a new storage config. Used by model-manager-loader.
	CreateStorageConfig(context.Context, *v1.CreateStorageConfigRequest) (*v1.StorageConfig, error)
	// GetStorageConfig gets a storage config. Used by model-manager-loader.
	GetStorageConfig(context.Context, *v1.GetStorageConfigRequest) (*v1.StorageConfig, error)
	// GetModel gets a model. Used by inference-manager-engine.
	GetModel(context.Context, *v1.GetModelRequest) (*v1.Model, error)
	// RegisterModel registers a new fine-tuned model. Used by job-manager-dispatcher.
	// The model is not published until PublishModel is called.
	RegisterModel(context.Context, *v1.RegisterModelRequest) (*v1.RegisterModelResponse, error)
	// PublishModel publishes the fine-tuned model. Used by job-manager-dispatcher.
	PublishModel(context.Context, *v1.PublishModelRequest) (*v1.PublishModelResponse, error)
	// GetModelPath returns the path of the model. Used by inference-manager-engine.
	GetModelPath(context.Context, *v1.GetModelPathRequest) (*v1.GetModelPathResponse, error)
	// GetModelAttributes returns the attributes of the model. Used by inference-manager-engine.
	GetModelAttributes(context.Context, *v1.GetModelAttributesRequest) (*v1.ModelAttributes, error)
	// CreateBaseModel creates a new base model. Used by model-manager-loader.
	CreateBaseModel(context.Context, *v1.CreateBaseModelRequest) (*v1.BaseModel, error)
	// GetBaseModelPath returns the path of the base model. Used by job-manager-dispatcher,
	// inference-manager-engine, and model-manager-loader.
	GetBaseModelPath(context.Context, *v1.GetBaseModelPathRequest) (*v1.GetBaseModelPathResponse, error)
	mustEmbedUnimplementedModelsWorkerServiceServer()
}

// UnimplementedModelsWorkerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModelsWorkerServiceServer struct {
}

func (UnimplementedModelsWorkerServiceServer) CreateStorageConfig(context.Context, *v1.CreateStorageConfigRequest) (*v1.StorageConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStorageConfig not implemented")
}
func (UnimplementedModelsWorkerServiceServer) GetStorageConfig(context.Context, *v1.GetStorageConfigRequest) (*v1.StorageConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageConfig not implemented")
}
func (UnimplementedModelsWorkerServiceServer) GetModel(context.Context, *v1.GetModelRequest) (*v1.Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (UnimplementedModelsWorkerServiceServer) RegisterModel(context.Context, *v1.RegisterModelRequest) (*v1.RegisterModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterModel not implemented")
}
func (UnimplementedModelsWorkerServiceServer) PublishModel(context.Context, *v1.PublishModelRequest) (*v1.PublishModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishModel not implemented")
}
func (UnimplementedModelsWorkerServiceServer) GetModelPath(context.Context, *v1.GetModelPathRequest) (*v1.GetModelPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelPath not implemented")
}
func (UnimplementedModelsWorkerServiceServer) GetModelAttributes(context.Context, *v1.GetModelAttributesRequest) (*v1.ModelAttributes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelAttributes not implemented")
}
func (UnimplementedModelsWorkerServiceServer) CreateBaseModel(context.Context, *v1.CreateBaseModelRequest) (*v1.BaseModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBaseModel not implemented")
}
func (UnimplementedModelsWorkerServiceServer) GetBaseModelPath(context.Context, *v1.GetBaseModelPathRequest) (*v1.GetBaseModelPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBaseModelPath not implemented")
}
func (UnimplementedModelsWorkerServiceServer) mustEmbedUnimplementedModelsWorkerServiceServer() {}

// UnsafeModelsWorkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelsWorkerServiceServer will
// result in compilation errors.
type UnsafeModelsWorkerServiceServer interface {
	mustEmbedUnimplementedModelsWorkerServiceServer()
}

func RegisterModelsWorkerServiceServer(s grpc.ServiceRegistrar, srv ModelsWorkerServiceServer) {
	s.RegisterService(&ModelsWorkerService_ServiceDesc, srv)
}

func _ModelsWorkerService_CreateStorageConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateStorageConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsWorkerServiceServer).CreateStorageConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.models.server.v1.ModelsWorkerService/CreateStorageConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsWorkerServiceServer).CreateStorageConfig(ctx, req.(*v1.CreateStorageConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelsWorkerService_GetStorageConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetStorageConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsWorkerServiceServer).GetStorageConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.models.server.v1.ModelsWorkerService/GetStorageConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsWorkerServiceServer).GetStorageConfig(ctx, req.(*v1.GetStorageConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelsWorkerService_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsWorkerServiceServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.models.server.v1.ModelsWorkerService/GetModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsWorkerServiceServer).GetModel(ctx, req.(*v1.GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelsWorkerService_RegisterModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.RegisterModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsWorkerServiceServer).RegisterModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.models.server.v1.ModelsWorkerService/RegisterModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsWorkerServiceServer).RegisterModel(ctx, req.(*v1.RegisterModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelsWorkerService_PublishModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.PublishModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsWorkerServiceServer).PublishModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.models.server.v1.ModelsWorkerService/PublishModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsWorkerServiceServer).PublishModel(ctx, req.(*v1.PublishModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelsWorkerService_GetModelPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetModelPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsWorkerServiceServer).GetModelPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.models.server.v1.ModelsWorkerService/GetModelPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsWorkerServiceServer).GetModelPath(ctx, req.(*v1.GetModelPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelsWorkerService_GetModelAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetModelAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsWorkerServiceServer).GetModelAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.models.server.v1.ModelsWorkerService/GetModelAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsWorkerServiceServer).GetModelAttributes(ctx, req.(*v1.GetModelAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelsWorkerService_CreateBaseModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateBaseModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsWorkerServiceServer).CreateBaseModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.models.server.v1.ModelsWorkerService/CreateBaseModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsWorkerServiceServer).CreateBaseModel(ctx, req.(*v1.CreateBaseModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelsWorkerService_GetBaseModelPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetBaseModelPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsWorkerServiceServer).GetBaseModelPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.models.server.v1.ModelsWorkerService/GetBaseModelPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsWorkerServiceServer).GetBaseModelPath(ctx, req.(*v1.GetBaseModelPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelsWorkerService_ServiceDesc is the grpc.ServiceDesc for ModelsWorkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelsWorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "llmoperator.models.server.v1.ModelsWorkerService",
	HandlerType: (*ModelsWorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStorageConfig",
			Handler:    _ModelsWorkerService_CreateStorageConfig_Handler,
		},
		{
			MethodName: "GetStorageConfig",
			Handler:    _ModelsWorkerService_GetStorageConfig_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _ModelsWorkerService_GetModel_Handler,
		},
		{
			MethodName: "RegisterModel",
			Handler:    _ModelsWorkerService_RegisterModel_Handler,
		},
		{
			MethodName: "PublishModel",
			Handler:    _ModelsWorkerService_PublishModel_Handler,
		},
		{
			MethodName: "GetModelPath",
			Handler:    _ModelsWorkerService_GetModelPath_Handler,
		},
		{
			MethodName: "GetModelAttributes",
			Handler:    _ModelsWorkerService_GetModelAttributes_Handler,
		},
		{
			MethodName: "CreateBaseModel",
			Handler:    _ModelsWorkerService_CreateBaseModel_Handler,
		},
		{
			MethodName: "GetBaseModelPath",
			Handler:    _ModelsWorkerService_GetBaseModelPath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/legacy/model_manager_service.proto",
}
